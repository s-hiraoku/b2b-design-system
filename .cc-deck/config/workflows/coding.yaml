# Comprehensive Coding Workflow
# End-to-end development workflow with research, planning, implementation, testing, and documentation

name: coding-workflow
description: Complete development workflow with MCP integrations and Smart Context Propagation
version: "1.0.0"

# Smart Context Schema
context_schema:
  research_context:
    technologies: array[string]
    best_practices: array[object]
    documentation_sources: array[string]
  planning_context:
    architecture: object
    implementation_strategy: string
    technology_stack: array[string]
  implementation_context:
    code_generated: array[object]
    test_coverage: number
    quality_metrics: object

# Workflow Definition
phases:
  # Phase 1: Research
  - name: research
    agent: research-agent
    description: "Technology research using MCP integrations"
    inputs: [project_requirements]
    outputs:
      - research_context
      - technology_recommendations
    mcp_integrations:
      - deepwiki: "GitHub repository analysis"
      - context7: "Library documentation"
      - web_search: "Current best practices"
    success_criteria:
      - research_complete: true
      - technology_stack_identified: true
    next_phase: planning

  # Phase 2: Strategic Planning
  - name: planning
    agent: planning-agent
    description: "Develop architecture and implementation strategy"
    inputs: [research_context, project_requirements]
    outputs:
      - planning_context
      - architecture_design
      - implementation_roadmap
    success_criteria:
      - architecture_documented: true
      - implementation_plan_created: true
    next_phase: serena_onboarding

  # Phase 3: TDD Serena Onboarding & Environment Setup
  - name: serena_onboarding
    agent: serena-onboarding-agent
    description: "Initialize Serena MCP and establish TDD development environment"
    inputs: [planning_context, research_context]
    outputs:
      - serena_context
      - tdd_patterns
      - coding_standards
      - test_environment_config
    configuration:
      development_mode: "test_driven"
      tdd_focus: true
      pattern_preferences:
        - "AAA pattern for tests (Arrange-Act-Assert)"
        - "Given-When-Then structure for BDD"
        - "Descriptive test names"
        - "Red-Green-Refactor enforcement"
    success_criteria:
      - serena_initialized: true
      - tdd_patterns_established: true
      - test_framework_ready: true
    next_phase: tdd_cycle

  # Phase 4: TDD Red-Green-Refactor Cycle
  - name: tdd_cycle
    agent: tdd-agent
    description: "Execute strict TDD Red-Green-Refactor cycles following t-wada methodology"
    inputs: [serena_context, planning_context, tdd_patterns]
    outputs:
      - test_suite
      - minimal_implementations
      - refactored_code
      - tdd_cycles_log
    tdd_methodology:
      strict_mode: true
      cycle_enforcement: true
      test_first_only: true
      red_phase_validation: true
      green_phase_minimal: true
      refactor_phase_mandatory: true
    success_criteria:
      - all_cycles_complete: true
      - tests_written_first: true
      - minimal_implementation_achieved: true
      - refactoring_applied: true
      - zero_failing_tests: true
    next_phase: full_implementation

  # Phase 5: Complete TDD-Based Implementation
  - name: full_implementation
    agent: implementation-agent
    description: "Build complete implementation on TDD foundation"
    inputs: [test_suite, minimal_implementations, serena_context, refactored_code]
    outputs:
      - implementation_context
      - production_code
      - edge_case_handling
      - performance_optimizations
    implementation_approach: "tdd_completion"
    implementation_focus:
      - "Maintain ALL existing tests in passing state"
      - "Expand functionality while preserving test coverage"
      - "Add comprehensive error handling and edge cases"
      - "Optimize performance without breaking tests"
      - "Ensure production readiness and maintainability"
    mcp_integrations:
      - serena: "TDD-aware production code generation"
    success_criteria:
      - all_tests_passing: true
      - code_coverage: ">= 95%"
      - production_ready: true
      - performance_optimized: true
      - edge_cases_handled: true
    next_phase: testing

  # Phase 6: Testing
  - name: testing
    agent: testing-agent
    description: "Comprehensive testing strategy"
    inputs: [implementation_context]
    outputs:
      - test_results
      - coverage_report
    test_types:
      - unit_tests: true
      - integration_tests: true
      - e2e_tests: conditional
    success_criteria:
      - tests_created: true
      - tests_passing: true
      - coverage_threshold_met: true
    next_phase: documentation

  # Phase 7: Documentation
  - name: documentation
    agent: documentation-agent
    description: "Generate comprehensive documentation"
    inputs: [implementation_context, test_results]
    outputs:
      - api_documentation
      - usage_examples
      - tutorials
    documentation_types:
      - api_docs: true
      - readme: true
      - tutorials: true
      - examples: true
    success_criteria:
      - documentation_complete: true
      - examples_working: true
    next_phase: human_approval_coding

  # Phase 8: Human Approval Checkpoint
  - name: human_approval_coding
    type: human_interaction
    description: "Human review and approval of coding workflow completion before proceeding to refactoring"
    approval_scope:
      - "Code implementation quality and completeness"
      - "Test coverage and TDD adherence (95%+ expected)"
      - "Documentation accuracy and comprehensiveness" 
      - "Architecture alignment with design specifications"
      - "Performance and security considerations"
    review_materials:
      - implementation_context
      - test_results
      - api_documentation
      - code_coverage_report
    decision_options: [approved, approved_with_conditions, rejected, deferred]
    stakeholders:
      required: [technical_lead]
      optional: [product_owner, qa_lead]
    timeout: 72 # hours
    on_approval: 
      next_workflow: refactoring
    on_rejection:
      rollback_to_phase: tdd_cycle
      feedback_collection: true

# Parallel Execution Support
parallel_groups:
  development_and_testing:
    condition: "context.allow_parallel === true"
    phases: [implementation, testing]
    coordination: shared_context

# Integration Points
integrations:
  post_coding_workflows:
    - refactoring:
        condition: "context.code_quality_score < 8.0"
        trigger: automatic
    - integration_testing:
        condition: "context.api_endpoints > 0"
        trigger: automatic
    - acceptance:
        condition: "always"
        trigger: manual_approval

# Quality Gates
quality_gates:
  code_quality:
    threshold: 7.5
    metrics: [maintainability, readability, performance]
  test_coverage:
    threshold: 85
    exclude_patterns: [test_files, mocks]
  documentation_completeness:
    threshold: 90
    check_api_coverage: true