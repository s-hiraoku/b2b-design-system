# Development Environment Setup Workflow
# Dynamic MCP agent generation for project-specific development optimization

name: dev-env-setup-workflow
description: Dynamic MCP agent generation and Coding workflow integration for project-specific development optimization
version: "1.0.0"

# Smart Context Schema
context_schema:
  project_analysis:
    project_id: string
    technology_stack: object
    integration_opportunities: array
    development_context: object
  mcp_recommendations:
    recommended_agents: array
    research_summary: object
    confidence_level: string
  generated_configuration:
    extension_config: object
    merged_workflow: object
    agent_files: array

# Workflow Definition
phases:
  # Phase 1: Specification Analysis
  - name: spec_analysis
    agent: spec-analyzer
    required: true
    description: "Analyze Kiro SDD specifications to extract technology stack and development requirements"
    inputs: []
    outputs:
      - project_analysis
      - technology_stack
      - integration_opportunities
      - development_context
    success_criteria:
      - project_id_identified: true
      - technology_stack_extracted: true
      - specifications_analyzed: true
    next_phase: mcp_recommendation

  # Phase 2: MCP Recommendation
  - name: mcp_recommendation
    agent: mcp-recommender
    description: "Research and recommend optimal MCP agents for the project technology stack"
    inputs: [project_analysis, technology_stack, integration_opportunities]
    outputs:
      - recommended_mcp_agents
      - usage_rationale
      - research_summary
    mcp_integrations:
      - brave_search: "Research latest MCP tools and integrations"
      - deepwiki: "Analyze successful project patterns"
      - context7: "Validate tool documentation and compatibility"
    success_criteria:
      - recommendations_generated: true
      - research_completed: true
      - rationale_provided: true
    next_phase: user_approval

  # Phase 3: User Approval
  - name: user_approval
    type: human_interaction
    description: "User review and approval of recommended MCP agents"
    approval_scope:
      - "MCP agent relevance and utility for the project"
      - "Resource usage and complexity considerations"
      - "Integration with existing development workflow"
      - "Development efficiency impact assessment"
    review_materials:
      - recommended_mcp_agents
      - usage_rationale
      - research_summary
      - project_analysis
    decision_options: [approved, approved_with_modifications, rejected, deferred]
    stakeholders:
      required: [developer]
      optional: [technical_lead, project_owner]
    timeout: 48 # hours
    on_approval:
      next_phase: agent_generation
    on_rejection:
      rollback_to_phase: mcp_recommendation
      feedback_collection: true

  # Phase 4: Enhanced Implementation Agent Generation  
  - name: agent_generation
    agent: agent-generator
    description: "Generate unified enhanced-implementation-agent integrating all approved MCPs"
    inputs: [approved_mcp_agents, project_analysis, technology_stack]
    outputs:
      - enhanced_implementation_agent
      - agent_configuration_summary
      - mcp_integration_details
    agent_generation_rules:
      naming_convention: "enhanced-implementation-agent"
      directory_structure: ".claude/agents/coding/dynamic/{project_id}/"
      template_compliance: "cc_deck_subagent_standard"
      integration_approach: "unified_mcp_agent"
      file_creation_strategy: "claude_code_system_agent"
      base_template_source: ".claude/agents/coding/implementation-agent.md"
    success_criteria:
      - enhanced_agent_generated: true
      - all_mcps_integrated: true
      - file_created_successfully: true
      - proper_structure_maintained: true
      - claude_code_recognition: true
      - system_agent_availability: true
    validation_checks:
      - file_path_validation: ".claude/agents/coding/dynamic/{project_id}/enhanced-implementation-agent.md"
      - yaml_frontmatter_syntax: true
      - mcp_tools_integration: "all_approved_mcps_included"
      - fallback_mechanisms: "graceful_degradation_implemented"
    next_phase: workflow_integration

  # Phase 4.5: Workflow Integration
  - name: workflow_integration
    agent: workflow-integrator
    description: "Integrate generated agents into Coding workflow and create merged configuration files"
    inputs: [enhanced_implementation_agent, agent_configuration_summary, project_analysis]
    outputs:
      - coding_extension_config
      - coding_merged_workflow
      - integration_metadata
    
    workflow_integration_process:
      base_workflow_loading:
        - "Load base coding.yaml from .cc-deck/config/workflows/base/"
        - "Extract phases, agents, and configurations"
        - "Identify integration points for enhanced agents"
      
      extension_creation:
        - "Create coding-extension.yaml with project-specific enhancements"
        - "Define enhanced agent integration points"
        - "Configure MCP tool availability and fallback strategies"
      
      workflow_merging:
        - "Merge base coding.yaml with project extensions"
        - "Update agent selection logic to prioritize enhanced agents"
        - "Preserve all base workflow functionality with enhancements"
        - "Generate final coding-merged.yaml configuration"
      
      file_generation:
        base_workflow_source: ".cc-deck/config/workflows/base/coding.yaml"
        extension_output: ".cc-deck/runtime/projects/{project_id}/extensions/coding-extension.yaml"
        merged_output: ".cc-deck/runtime/projects/{project_id}/workflows/generated/coding-merged.yaml"
        metadata_output: ".cc-deck/runtime/projects/{project_id}/config/integration-metadata.json"
        directory_creation: "create_if_not_exists"
    
    success_criteria:
      - extension_config_created: true
      - merged_workflow_generated: true
      - integration_metadata_created: true
      - file_paths_validated: true
      - yaml_syntax_validated: true
      - agent_references_resolved: true
    
    next_phase: mcp_setup

  # Phase 5: MCP Setup and Configuration
  - name: mcp_setup
    agent: mcp-setup-manager
    description: "Configure and authenticate approved MCP tools for runtime usage"
    inputs: [approved_mcp_agents, enhanced_implementation_agent, project_analysis]
    outputs:
      - mcp_setup_complete
      - authentication_status
      - configuration_results
      - fallback_strategies
    mcp_setup_process:
      authentication_flow:
        - "Verify MCP server availability"
        - "Configure authentication credentials"
        - "Test connection and functionality"
        - "Document setup status and fallbacks"
      setup_validation:
        - "Validate each MCP tool connectivity"
        - "Test essential functions"
        - "Record setup completion status"
        - "Generate setup completion certificate"
    success_criteria:
      - setup_completion_documented: true
      - authentication_configured: true
      - fallback_strategies_defined: true
      - setup_certificate_created: true
    next_phase: mcp_validation

  # Phase 6: MCP Validation and Testing
  - name: mcp_validation
    agent: mcp-validation-agent
    description: "Validate that all configured MCP tools are functioning correctly"
    inputs: [mcp_setup_complete, authentication_status, enhanced_implementation_agent]
    outputs:
      - mcp_validation_results
      - functional_mcp_tools
      - failed_mcp_tools
      - performance_metrics
    validation_process:
      connectivity_tests:
        - "Test each MCP server connection and authentication"
        - "Verify API endpoints respond within acceptable timeouts"
        - "Validate authentication tokens and permissions"
        - "Check service availability and rate limits"
      functionality_tests:
        - "Execute basic operations for each MCP tool"
        - "Test core functionality that enhanced-implementation-agent will use"
        - "Verify data formats and response structures"
        - "Validate error handling and fallback mechanisms"
      performance_tests:
        - "Measure response times for each MCP tool"
        - "Test concurrent usage scenarios"
        - "Validate timeout configurations"
        - "Check resource usage and memory impact"
    success_criteria:
      - all_critical_mcps_functional: true
      - response_times_acceptable: true
      - authentication_verified: true
      - fallback_mechanisms_tested: true
    next_phase: human_approval_dev_env

  # Phase 7: Human Approval
  - name: human_approval_dev_env
    type: human_interaction
    description: "Review enhanced implementation agent and MCP setup before proceeding to Coding workflow"
    approval_scope:
      - "Enhanced implementation agent functionality and MCP integration quality"
      - "MCP setup completion and authentication status"
      - "Development environment readiness and optimization potential"
      - "Fallback strategies and error handling appropriateness"
    review_materials:
      - enhanced_implementation_agent
      - agent_configuration_summary
      - mcp_setup_complete
      - authentication_status
      - fallback_strategies
    decision_options: [approved, approved_with_conditions, rejected, deferred]
    stakeholders:
      required: [developer, technical_lead]
      optional: [project_owner]
    timeout: 24 # hours
    on_approval:
      next_workflow: coding
    on_rejection:
      rollback_to_phase: agent_generation
      feedback_collection: true

# Error Handling and Recovery
error_handling:
  retry_policy:
    max_retries: 3
    retry_delay: 10s
    exponential_backoff: true

  recovery_strategies:
    # Analysis Phase Failures
    specification_read_failure:
      action: verify_kiro_sdd_completion
      escalation: notify_user_missing_specs
      
    technology_extraction_failure:
      action: request_manual_tech_stack_input
      fallback: use_generic_recommendations
      
    # Research Phase Failures
    mcp_research_failure:
      action: fallback_to_cached_recommendations
      fallback_sources: [built_in_patterns, default_mcps]
      
    brave_search_timeout:
      action: use_context7_and_deepwiki_only
      timeout_threshold: 30s
      
    context7_unavailable:
      action: use_deepwiki_and_brave_search
      
    deepwiki_unavailable:
      action: use_context7_and_brave_search
      
    # Generation Phase Failures
    agent_generation_failure:
      action: retry_with_simplified_config
      preserve_user_approval: true
      
    file_creation_failure:
      action: check_permissions_and_retry
      escalation_after: 2_attempts
      
    directory_creation_failure:
      action: create_parent_directories_recursively
      fallback: use_temp_directory
      
    # Integration Phase Failures  
    workflow_merge_failure:
      action: validate_base_workflow_and_retry
      fallback: create_standalone_extension
      
    yaml_syntax_error:
      action: regenerate_with_validation
      max_attempts: 3
      
    # Human Approval Failures
    approval_timeout:
      action: send_reminder_notification
      escalation_after: 48h
      
    approval_rejection:
      action: collect_detailed_feedback
      enable_iterative_improvement: true

  # Circuit Breaker Pattern
  circuit_breakers:
    mcp_services:
      failure_threshold: 5
      timeout: 30s
      recovery_timeout: 60s
      
    file_operations:
      consecutive_failure_threshold: 3
      escalation_required: true
      
    user_approval:
      timeout_threshold: 72h
      auto_escalation: true

# Graceful Degradation Strategy
graceful_degradation:
  mcp_service_failures:
    brave_search_failure:
      fallback: "Use Context7 and DeepWiki for research"
      impact: "Reduced external tool discovery"
      
    context7_failure:
      fallback: "Use DeepWiki and Brave Search"
      impact: "Limited official documentation access"
      
    deepwiki_failure:
      fallback: "Use Context7 and Brave Search"
      impact: "No repository pattern analysis"
      
    all_mcp_failures:
      fallback: "Use built-in recommendation templates"
      impact: "Generic recommendations instead of researched ones"
      
  agent_generation_failures:
    partial_generation:
      action: "Continue with successfully generated agents"
      notification: "Some agents could not be generated"
      
    complete_generation_failure:
      action: "Proceed to Coding workflow with default agents"
      notification: "Using standard Coding workflow without enhancements"

# Quality Gates
quality_gates:
  spec_analysis:
    minimum_technology_stack_items: 3
    required_project_metadata: ["project_id", "primary_framework"]
    
  mcp_recommendations:
    minimum_recommendations: 1
    maximum_recommendations: 8
    research_confidence_threshold: "medium"
    
  agent_generation:
    file_validation: "yaml_syntax_valid"
    naming_convention_compliance: true
    directory_structure_validation: true
    
  workflow_integration:
    merged_yaml_validation: true
    agent_reference_validation: true
    no_circular_dependencies: true

# Monitoring and Analytics
monitoring:
  metrics:
    # Phase Performance
    - spec_analysis_duration
    - mcp_research_duration
    - agent_generation_duration
    - workflow_integration_duration
    
    # Quality Metrics
    - recommendation_accuracy_rate
    - user_approval_success_rate
    - generated_agent_quality_score
    - integration_success_rate
    
    # Usage Metrics
    - most_recommended_mcp_types
    - technology_stack_patterns
    - user_approval_patterns
    - generated_agent_utilization
    
    # Error Metrics
    - mcp_service_failure_rate
    - generation_failure_rate
    - integration_error_rate

  alerts:
    # Performance Alerts
    - phase_duration_anomaly: "> 200% of baseline"
    - mcp_research_timeout: "> 5 minutes"
    - file_generation_delays: "> 30 seconds"
    
    # Quality Alerts
    - low_recommendation_confidence: "< medium"
    - repeated_user_rejections: "> 2 for same project"
    - integration_validation_failures: "> 1"
    
    # System Alerts
    - mcp_service_degradation: "> 3 failures in 10 minutes"
    - file_system_issues: "any permission errors"
    - workflow_corruption: "yaml validation failures"

  notifications:
    # Phase Completions
    - spec_analysis_complete
    - recommendations_ready_for_approval
    - agents_generated_successfully
    - workflow_integration_complete
    
    # Issues
    - mcp_service_unavailable
    - user_approval_required
    - generation_errors_occurred
    - manual_intervention_needed

# Integration Points
integration_points:
  # Input from previous workflows
  kiro_sdd_output:
    specifications_directory: ".kiro/specs/{project_id}/"
    required_files: ["requirements.md", "design.md", "tasks.md"]
    metadata_file: "kiro_status.json"
    
  # Output to next workflows
  coding_workflow_enhancement:
    enhanced_configuration: ".cc-deck/runtime/projects/{project_id}/workflows/generated/coding-merged.yaml"
    generated_agents: ".claude/agents/coding/dynamic/{project_id}/"
    extension_config: ".cc-deck/runtime/projects/{project_id}/extensions/coding-extension.yaml"
    integration_metadata: ".cc-deck/runtime/projects/{project_id}/config/integration-metadata.json"
    mcp_setup_status: ".cc-deck/runtime/projects/{project_id}/config/mcp-setup-complete.json"

# Success Metrics
success_criteria:
  completion_indicators:
    - all_phases_executed_successfully: true
    - user_approval_obtained: true
    - agents_generated_and_validated: true
    - workflow_integration_completed: true
    
  quality_indicators:
    - recommendation_relevance: "> 80%"
    - user_satisfaction: "> 4.0/5.0"
    - agent_utilization_rate: "> 60%"
    - integration_stability: "no_errors"
    
  performance_indicators:
    - total_workflow_duration: "< 30 minutes"
    - user_interaction_time: "< 10 minutes"
    - file_generation_speed: "< 5 seconds per agent"