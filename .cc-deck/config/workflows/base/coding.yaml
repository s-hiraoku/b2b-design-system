# Comprehensive Coding Workflow
# End-to-end development workflow with research, planning, implementation, testing, and documentation

name: coding-workflow
description: Complete development workflow with MCP integrations and Smart Context Propagation
version: "1.0.0"

# Smart Context Schema
context_schema:
  research_context:
    technologies: array[string]
    best_practices: array[object]
    documentation_sources: array[string]
  planning_context:
    architecture: object
    implementation_strategy: string
    technology_stack: array[string]
  implementation_context:
    code_generated: array[object]
    test_coverage: number
    quality_metrics: object

# Workflow Definition
phases:
  # Phase 1: Research
  - name: research
    agent: research-agent
    description: "Technology research using MCP integrations"
    available_agents:
      - research-agent: "Comprehensive technology research"
      - deepwiki-research-solver: "Specialized technical problem research and solutions"
    inputs: [project_requirements]
    outputs:
      - research_context
      - technology_recommendations
    mcp_integrations:
      - deepwiki: "GitHub repository analysis"
      - context7: "Library documentation"
      - web_search: "Current best practices"
    success_criteria:
      - research_complete: true
      - technology_stack_identified: true
    next_phase: planning

  # Phase 2: Strategic Planning
  - name: planning
    agent: planning-agent
    description: "Develop architecture and implementation strategy"
    inputs: [research_context, project_requirements]
    outputs:
      - planning_context
      - architecture_design
      - implementation_roadmap
    success_criteria:
      - architecture_documented: true
      - implementation_plan_created: true
    next_phase: serena_onboarding

  # Phase 3: TDD Serena Onboarding & Environment Setup
  - name: serena_onboarding
    agent: serena-onboarding-agent
    description: "Initialize Serena MCP and establish TDD development environment"
    inputs: [planning_context, research_context]
    outputs:
      - serena_context
      - tdd_patterns
      - coding_standards
      - test_environment_config
    configuration:
      development_mode: "test_driven"
      tdd_focus: true
      pattern_preferences:
        - "AAA pattern for tests (Arrange-Act-Assert)"
        - "Given-When-Then structure for BDD"
        - "Descriptive test names"
        - "Red-Green-Refactor enforcement"
    success_criteria:
      - serena_initialized: true
      - tdd_patterns_established: true
      - test_framework_ready: true
    next_phase: tdd_cycle

  # Phase 4: TDD Red-Green-Refactor Cycle
  - name: tdd_cycle
    agent: tdd-agent
    description: "Execute strict TDD Red-Green-Refactor cycles following t-wada methodology"
    inputs: [serena_context, planning_context, tdd_patterns]
    outputs:
      - test_suite
      - minimal_implementations
      - refactored_code
      - tdd_cycles_log
    tdd_methodology:
      strict_mode: true
      cycle_enforcement: true
      test_first_only: true
      red_phase_validation: true
      green_phase_minimal: true
      refactor_phase_mandatory: true
    success_criteria:
      - all_cycles_complete: true
      - tests_written_first: true
      - minimal_implementation_achieved: true
      - refactoring_applied: true
      - zero_failing_tests: true
    next_phase: full_implementation

  # Phase 5: Enhanced Implementation
  - name: full_implementation
    agent: enhanced-implementation-agent
    fallback_agent: implementation-agent
    description: "Production-ready implementation using enhanced MCP capabilities or standard implementation with fail-safe fallback"
    inputs: [test_suite, minimal_implementations, serena_context, refactored_code]
    outputs:
      - implementation_context
      - production_code
      - edge_case_handling
      - performance_optimizations
      - quality_metrics
      - best_practices_applied
      - security_validations
    
    # Enhanced Implementation Strategy
    implementation_strategy:
      primary_approach: "enhanced_mcp_integration"
      fallback_approach: "standard_implementation_with_research_support"
      agent_selection_logic: "check_enhanced_agent_availability"
      fail_safe_guarantee: true
    
    # Enhanced vs Standard Implementation
    enhanced_implementation:
      condition: "enhanced_agent_available AND mcp_setup_complete"
      agent: "enhanced-implementation-agent"
      capabilities:
        - "Integrated MCP tool access (Context7, DeepWiki, Serena, etc.)"
        - "Real-time library documentation and API validation"
        - "Repository pattern analysis and best practices application"
        - "Advanced code generation with MCP-enhanced context"
        - "Automatic performance optimization and security scanning"
      
      implementation_focus:
        - "Leverage all available MCP tools for optimal implementation"
        - "Apply latest documentation and best practices from Context7"
        - "Use DeepWiki for implementation pattern analysis"
        - "Maintain TDD foundation while enhancing with MCP capabilities"
        - "Ensure production readiness with comprehensive MCP support"
    
    standard_implementation:
      condition: "enhanced_agent_unavailable OR mcp_setup_failed"
      agent: "implementation-agent"
      capabilities:
        - "Standard TDD-based implementation approach"
        - "Serena MCP integration for code generation"
        - "Manual research and documentation lookup"
        - "Standard quality assurance and testing practices"
        - "Tasks.md progress tracking and checkbox updates"
      
      implementation_focus:
        - "Complete TDD implementation using existing test foundation"
        - "Apply established coding patterns and best practices"
        - "Ensure all tests remain passing throughout implementation"
        - "Maintain code quality and production readiness standards"
        - "Update tasks.md checkboxes as each task is completed"
    
    # Tasks.md Integration (Both Enhanced and Standard Agents)
    task_management:
      source: ".kiro/specs/{project_id}/tasks.md"
      tracking_strategy:
        - "Load tasks.md at phase start to identify pending tasks"
        - "Parse checkbox format: '- [ ]' (pending) vs '- [x]' (completed)"
        - "Execute tasks sequentially or in dependency order"
        - "Update checkbox immediately upon task completion"
        - "Commit tasks.md updates after each task or batch completion"
      
      task_execution_flow:
        1. "Read current tasks.md state"
        2. "Identify next uncompleted task(s)"
        3. "Execute implementation for the task"
        4. "Run tests to verify implementation"
        5. "Update checkbox from '- [ ]' to '- [x]'"
        6. "Commit both code changes and tasks.md update"
        7. "Proceed to next task or report completion"
      
      progress_reporting:
        - "Display completion percentage (e.g., 8/12 tasks = 67%)"
        - "Show remaining tasks count and estimated time"
        - "Highlight blocked or dependent tasks"
        - "Generate completion summary for human review"
    
    # MCP Integration Strategy (Enhanced Agent Only)
    enhanced_mcp_integration:
      condition: "enhanced_agent_available"
      integrated_tools:
        - "Context7 MCP: Library documentation and API validation"
        - "DeepWiki MCP: Repository pattern analysis and problem solving"
        - "Serena MCP: Intelligent code generation and memory management"
        - "Brave Search MCP: Latest best practices and emerging solutions (if approved)"
        - "Additional approved MCPs from dev-env-setup workflow"
      
      usage_optimization:
        - "Priority-based MCP usage for critical vs enhancement features"
        - "Intelligent caching to minimize response times"
        - "Graceful degradation when MCP tools are unavailable"
        - "Performance monitoring and timeout handling"
      
      fallback_mechanisms:
        - "Context7 unavailable → Use cached documentation"
        - "DeepWiki timeout → Rely on Serena patterns and standard practices"
        - "Brave Search failure → Continue with existing knowledge"
        - "All MCP failures → Switch to standard implementation-agent"
    
    # Quality Assurance Integration
    quality_assurance:
      enhanced_monitoring:
        condition: "enhanced_agent_available"
        capabilities:
          - "Real-time MCP-powered code quality analysis"
          - "Automated library compatibility checking via Context7"
          - "Repository pattern compliance via DeepWiki"
          - "Advanced security scanning with latest threat intelligence"
      
      standard_monitoring:
        condition: "standard_implementation"
        capabilities:
          - "Standard code quality metrics tracking"
          - "Basic test coverage monitoring"
          - "Manual security best practices application"
          - "Standard performance optimization techniques"
      
      unified_quality_gates:
        entry_gate:
          - tdd_foundation_validated: true
          - agent_selection_completed: true
          - mcp_setup_status_verified: true
        exit_gate:
          - all_tests_passing: true
          - code_coverage: ">= 95%"
          - implementation_completeness: "100%"
          - production_readiness: true
    
    # Success Criteria (Agent-Agnostic)
    success_criteria:
      core_requirements:
        - all_tests_passing: true
        - feature_requirements_met: "100%"
        - tdd_foundation_preserved: true
        - implementation_completeness: "100%"
        
      quality_standards:
        - code_coverage: ">= 95%"
        - code_quality_score: ">= 8.0"
        - production_readiness: true
        - error_handling_comprehensive: true
        
      enhanced_benefits: 
        condition: "enhanced_agent_used"
        additional_criteria:
          - "MCP integration successful: Context7, DeepWiki, Serena"
          - "Latest best practices applied from MCP research"
          - "Advanced performance optimization achieved"
          - "Enhanced security scanning completed"
          - "Repository pattern alignment verified"
    
    # Agent Selection and Fallback Logic
    agent_selection:
      selection_order:
        1. "Check for enhanced-implementation-agent availability"
        2. "Verify MCP setup completion status"
        3. "Select enhanced agent if available and MCP ready"
        4. "Fall back to standard implementation-agent if enhanced unavailable"
      
      enhanced_agent_criteria:
        - "Agent file exists: .cc-deck/runtime/projects/{project_id}/agents/enhanced-implementation-agent.md"
        - "MCP setup complete: .cc-deck/runtime/projects/{project_id}/config/mcp-setup-complete.json"
        - "No critical MCP failures in setup status"
      
      fallback_triggers:
        - "Enhanced agent file not found"
        - "MCP setup failed or incomplete"
        - "Enhanced agent execution failure"
        - "MCP services unavailable during execution"
    
    # Error Handling for Implementation Phase
    error_handling:
      enhanced_agent_errors:
        mcp_service_failure:
          action: "Graceful degradation within enhanced agent"
          fallback: "Switch to standard implementation-agent if critical"
        
        enhanced_agent_unavailable:
          action: "Automatic fallback to standard implementation-agent"
          notification: "Using standard implementation due to enhanced agent unavailability"
      
      standard_implementation_errors:
        compilation_errors:
          action: "Standard error analysis and resolution"
          escalation_after: 3_failed_attempts
        
        test_coverage_drop:
          action: "Immediate halt and test restoration"
          recovery: "Revert to passing state and re-implement with tests"
    
    # Agent Performance Tracking
    performance_tracking:
      enhanced_agent_metrics:
        - "MCP tool usage efficiency"
        - "Implementation quality improvement over standard"
        - "Time savings from MCP integration"
        - "Advanced feature utilization rate"
      
      fallback_tracking:
        - "Fallback trigger frequency and causes"
        - "Standard agent performance when used as fallback"
        - "User satisfaction with fallback experience"
    
    next_phase: testing

  # Phase 6: Testing
  - name: testing
    agent: testing-agent
    description: "Comprehensive testing strategy"
    inputs: [implementation_context]
    outputs:
      - test_results
      - coverage_report
    test_types:
      - unit_tests: true
      - integration_tests: true
      - e2e_tests: conditional
    success_criteria:
      - tests_created: true
      - tests_passing: true
      - coverage_threshold_met: true
    next_phase: specification_compliance_check

  # Phase 6.5: Specification Compliance Check
  - name: specification_compliance_check
    agent: acceptance-reviewer
    description: "Verify implementation compliance with specifications and detect missing features"
    inputs: [implementation_context, test_results, coverage_report]
    outputs:
      - compliance_report
      - specification_gaps
      - implementation_completeness_score
      - missing_features_list
    
    # Specification Verification Process
    verification_process:
      specification_analysis:
        - "Load and parse .kiro/specs/ directory specifications"
        - "Extract feature requirements and acceptance criteria"
        - "Identify mandatory vs optional features"
        - "Map specifications to implementation artifacts"
      
      implementation_verification:
        - "Analyze implemented code against specification requirements"
        - "Verify API endpoints match specification definitions"
        - "Check data models align with specification schemas"
        - "Validate business logic matches specified behavior"
      
      tasks_completion_check:
        - "Parse tasks.md file for completion status"
        - "Verify all mandatory tasks are marked complete"
        - "Identify incomplete or skipped tasks"
        - "Cross-reference tasks with actual implementation"
      
      gap_analysis:
        - "Identify missing features from specifications"
        - "Detect implementation deviations from requirements"
        - "Flag incomplete or partial implementations"
        - "Generate prioritized gap remediation plan"
    
    # Decision Logic
    decision_criteria:
      completion_threshold:
        mandatory_features: "100%"  # All mandatory features must be implemented
        optional_features: ">= 80%"  # Most optional features should be implemented
        tasks_completion: ">= 95%"   # Nearly all tasks should be complete
        specification_alignment: ">= 90%"  # High specification alignment required
      
      quality_gates:
        - "No critical specification gaps identified"
        - "All mandatory API endpoints implemented"
        - "Core business logic fully implemented"
        - "Data models match specification requirements"
        - "Authentication/authorization properly implemented"
        - "Error handling meets specification standards"
    
    # Conditional Flow Control
    flow_control:
      on_success:
        condition: "compliance_score >= 90% AND no_critical_gaps = true"
        action: "proceed_to_documentation"
        next_phase: "documentation"
        
      on_failure:
        condition: "compliance_score < 90% OR critical_gaps_detected = true"
        action: "rollback_to_tdd_cycle"
        next_phase: "tdd_cycle"
        feedback_data:
          - specification_gaps
          - missing_features_list
          - implementation_recommendations
          - priority_tasks_for_completion
        
      rollback_context:
        preserve_data:
          - "All existing tests (maintain TDD foundation)"
          - "Completed implementation components"
          - "Quality metrics and coverage data"
          - "Specification compliance report"
        
        enhancement_focus:
          - "Address identified specification gaps"
          - "Implement missing mandatory features"
          - "Complete incomplete tasks from tasks.md"
          - "Align implementation with specification requirements"
    
    # Integration with Project Structure  
    specification_sources:
      primary_specifications: ".kiro/specs/"
      task_tracking: ".kiro/specs/*/tasks.md"
      acceptance_criteria: ".kiro/specs/*/acceptance.md"
      api_specifications: ".kiro/specs/*/api.md"
      
    validation_scope:
      code_analysis:
        - "src/ directory implementation review"
        - "API routes and endpoints validation"
        - "Component and service implementation check"
        - "Database schema and model verification"
      
      test_coverage_verification:
        - "Ensure tests cover specified requirements"
        - "Verify edge cases from specifications are tested"
        - "Confirm integration tests match specification workflows"
      
      documentation_alignment:
        - "Check API documentation matches specifications"
        - "Verify usage examples align with requirements"
        - "Confirm configuration matches specification guidelines"
    
    success_criteria:
      - specification_compliance: ">= 90%"
      - mandatory_features_complete: "100%"
      - critical_gaps_count: "0"
      - tasks_completion_rate: ">= 95%"
      - implementation_quality_score: ">= 8.0"

  # Phase 7: Documentation
  - name: documentation
    agent: documentation-agent
    description: "Generate comprehensive documentation"
    inputs: [implementation_context, test_results]
    outputs:
      - api_documentation
      - usage_examples
      - tutorials
    documentation_types:
      - api_docs: true
      - readme: true
      - tutorials: true
      - examples: true
    success_criteria:
      - documentation_complete: true
      - examples_working: true
    next_phase: human_approval_coding

  # Phase 8: Human Approval Checkpoint
  - name: human_approval_coding
    type: human_interaction
    description: "Human review and approval of coding workflow completion before proceeding to refactoring"
    approval_scope:
      - "Code implementation quality and completeness"
      - "Test coverage and TDD adherence (95%+ expected)"
      - "Specification compliance verification results"
      - "Documentation accuracy and comprehensiveness" 
      - "Architecture alignment with design specifications"
      - "Performance and security considerations"
    review_materials:
      - implementation_context
      - test_results
      - compliance_report
      - api_documentation
      - code_coverage_report
    decision_options: [approved, approved_with_conditions, rejected, deferred]
    stakeholders:
      required: [technical_lead]
      optional: [product_owner, qa_lead]
    timeout: 72 # hours
    on_approval: 
      next_workflow: refactoring
    on_rejection:
      rollback_to_phase: tdd_cycle
      feedback_collection: true

# Error Handling and Recovery
error_handling:
  retry_policy:
    max_retries: 3
    retry_delay: 15s
    exponential_backoff: true
    
  recovery_strategies:
    # Research Phase Failures
    research_mcp_failure:
      action: fallback_to_local_research
      fallback_sources: [cached_documentation, local_examples]
      timeout: 300s
      
    deepwiki_timeout:
      action: switch_to_context7
      max_attempts: 2
      
    # Planning Phase Failures
    architecture_validation_failure:
      action: rollback_to_research
      collect_additional_requirements: true
      
    # TDD Phase Failures
    serena_onboarding_failure:
      action: manual_tdd_setup
      create_fallback_config: true
      notify: true
      
    tdd_cycle_failure:
      action: preserve_tests_rollback_implementation
      create_checkpoint: before_cycle
      
    test_compilation_failure:
      action: analyze_and_fix_syntax
      max_auto_fix_attempts: 2
      escalate_on_failure: true
      
    # Implementation Phase Failures
    implementation_quality_gate_failure:
      action: trigger_refactoring_cycle
      preserve_tests: mandatory
      
    coverage_threshold_failure:
      action: generate_additional_tests
      target_coverage: ">= 95%"
      
    # Integration Failures
    mcp_service_degradation:
      action: switch_to_backup_service
      services:
        serena: local_analysis_mode
        deepwiki: cached_fallback
        context7: offline_documentation
        
    # Human Approval Failures
    approval_timeout:
      action: send_escalation_notification
      escalation_chain: [technical_lead, engineering_manager]
      timeout_extension: 24h
      
    approval_rejection:
      action: analyze_feedback_and_rollback
      feedback_analysis: automated
      rollback_strategy: targeted_phase
      
    # Critical System Failures
    context_corruption:
      action: restore_from_checkpoint
      backup_source: latest_valid_checkpoint
      
    workflow_deadlock:
      action: force_phase_transition
      require_manual_approval: true
      create_incident_report: true

  # Checkpoint System
  checkpoints:
    frequency: before_each_phase
    retention_period: 72h
    include_state:
      - context_data
      - intermediate_outputs
      - quality_metrics
      - test_results
      - approval_history
    
    critical_checkpoints:
      - before_tdd_cycle: comprehensive_backup
      - before_implementation: full_state_backup
      - after_approval: immutable_milestone
      
  # Circuit Breaker Pattern
  circuit_breakers:
    mcp_services:
      failure_threshold: 5
      timeout: 30s
      half_open_recovery_timeout: 60s
      
    quality_gates:
      consecutive_failure_threshold: 3
      escalation_required: true
      
    human_approval:
      timeout_threshold: 72h
      auto_escalation: true

# Parallel Execution Support
parallel_groups:
  development_and_testing:
    condition: "context.allow_parallel === true"
    phases: [full_implementation, testing]
    coordination: shared_context
    failure_isolation: true
    
  research_and_planning:
    condition: "context.fast_track_enabled === true"
    phases: [research, planning]
    coordination: shared_context
    dependency_management: automatic
    
  mcp_services_parallel:
    condition: "context.mcp_parallel_enabled === true"
    services: [deepwiki, context7, serena]
    load_balancing: round_robin
    failure_tolerance: continue_with_available

# Supplementary Agents
# These agents are available throughout the workflow for specific needs
supplementary_agents:
  - name: deepwiki-research-solver
    description: "Research technical issues and find solutions during any phase"
    availability: all_phases
    primary_usage: implementation_phase
    use_cases:
      - "Troubleshooting implementation errors and compilation issues"
      - "Finding best practices for specific technologies and frameworks"
      - "Researching library-specific solutions and patterns"
      - "Understanding framework patterns and architectural decisions"
      - "Analyzing successful implementation patterns from popular repositories"
    mcp_integrations:
      - deepwiki: "Repository analysis and pattern extraction"
      - context7: "Framework-specific documentation and solutions"
      
  - name: research-agent
    description: "Comprehensive technology research using multiple MCP integrations"
    availability: all_phases
    primary_usage: research_and_implementation_phases
    use_cases:
      - "Pre-implementation technology stack validation"
      - "Real-time best practices research during implementation"
      - "Security considerations and vulnerability analysis"
      - "Performance optimization techniques research"
      - "Library compatibility and version analysis"
    mcp_integrations:
      - context7: "Official library documentation and API references"
      - deepwiki: "Community implementation patterns and examples"
      - web_search: "Latest trends, security updates, and community solutions"
      
  - name: code-quality-validator
    description: "Continuous code quality validation and enhancement recommendations"
    availability: implementation_and_testing_phases
    primary_usage: implementation_phase
    use_cases:
      - "Real-time code quality monitoring and analysis"
      - "Security vulnerability scanning and mitigation"
      - "Performance benchmark validation and optimization"
      - "Test coverage analysis and improvement recommendations"
      - "Code documentation completeness assessment"
    quality_dimensions:
      - functional_quality: "Requirements coverage and edge case handling"
      - technical_quality: "Code complexity, maintainability, test coverage"
      - security_quality: "Vulnerability scanning and best practices compliance"
      - performance_quality: "Benchmark validation and optimization opportunities"
      - documentation_quality: "API documentation and code comment completeness"

# Integration Points
integrations:
  post_coding_workflows:
    - refactoring:
        condition: "context.code_quality_score < 8.0"
        trigger: automatic
    - integration_testing:
        condition: "context.api_endpoints > 0"
        trigger: automatic
    - acceptance:
        condition: "always"
        trigger: manual_approval

# Quality Gates
quality_gates:
  code_quality:
    threshold: 7.5
    metrics: [maintainability, readability, performance]
  test_coverage:
    line_coverage: ">= 95%"
    branch_coverage: ">= 90%"
    function_coverage: ">= 95%"
    exclude_patterns: [test_files, mocks]
  tdd_adherence:
    test_first_percentage: ">= 100%"
    red_green_refactor_cycles: "documented"
    minimal_implementation_verified: true
  documentation_completeness:
    threshold: 90
    api_coverage: ">= 95%"
    check_api_coverage: true
  architecture_compliance:
    design_alignment: true
    dependency_validation: true
    pattern_consistency: true

# Monitoring and Analytics
monitoring:
  metrics:
    # Phase Performance Metrics
    - phase_duration_research
    - phase_duration_planning
    - phase_duration_serena_onboarding
    - phase_duration_tdd_cycle
    - phase_duration_full_implementation
    - phase_duration_testing
    - phase_duration_documentation
    
    # TDD-Specific Metrics
    - tdd_cycle_count
    - tdd_cycle_efficiency
    - test_first_compliance_rate
    - refactoring_frequency
    - green_phase_duration
    - red_phase_duration
    
    # Code Quality Metrics
    - test_coverage_progression
    - code_quality_score_trend
    - technical_debt_reduction
    - cyclomatic_complexity_trend
    - code_duplication_ratio
    
    # Implementation Progress
    - implementation_velocity
    - feature_completion_rate
    - bug_introduction_rate
    - code_review_feedback_volume
    
    # MCP Integration Performance
    - deepwiki_query_response_time
    - context7_lookup_efficiency
    - serena_analysis_duration
    
    # Human Approval Metrics
    - approval_response_time
    - approval_iteration_count
    - feedback_resolution_time

  alerts:
    # Quality Degradation Alerts
    - test_coverage_drop: "> 5%"
    - code_quality_regression: "> 0.5 points"
    - tdd_compliance_violation: "< 95%"
    
    # Performance Alerts  
    - phase_duration_anomaly: "> 150% of baseline"
    - implementation_velocity_drop: "> 30%"
    - mcp_service_degradation: "> 5s response time"
    
    # Process Alerts
    - approval_timeout_risk: "> 48 hours pending"
    - critical_error_threshold: "> 3 errors per phase"
    - dependency_conflict_detected: "any"

  notifications:
    # Phase Completion Notifications
    - research_phase_complete
    - planning_phase_complete
    - tdd_environment_ready
    - tdd_cycle_complete
    - implementation_milestone_reached
    - testing_phase_complete
    - documentation_generated
    
    # Quality Milestone Notifications
    - coverage_threshold_achieved
    - quality_gate_passed
    - architecture_validated
    
    # Issue Notifications
    - tdd_compliance_warning
    - quality_regression_detected
    - approval_required
    - manual_intervention_needed
    - mcp_integration_issue

# Reporting Configuration
reporting:
  formats:
    - html: comprehensive_dashboard
    - json: api_consumption
    - markdown: documentation
    - metrics: prometheus_format
  
  distribution:
    - slack_channel: "#coding-workflow"
    - email_list: "dev-team@company.com"
    - dashboard_update: real_time
    - metrics_export: continuous
  
  retention:
    phase_metrics: 180_days
    quality_metrics: 1_year
    tdd_cycle_data: 90_days
    approval_history: 2_years
    performance_data: 1_year

# Progress Tracking Integration
progress_tracking:
  tasks_md_sync:
    real_time_update: true
    checkbox_automation: true
    progress_percentage: calculated
    milestone_detection: automatic
  
  context_propagation:
    state_checkpoints: every_phase
    rollback_points: before_major_phases
    audit_trail: comprehensive
    
  quality_checkpoints:
    frequency: every_phase
    automated_validation: true
    human_review_triggers: quality_gate_failures